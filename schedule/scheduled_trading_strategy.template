//@version=6
strategy("Scheduled Trading Strategy", overlay=true, default_qty_type=strategy.fixed, calc_on_every_tick=true)

// 策略参数
debugMode = input.bool(false, title="Debug Mode")
enableStrategy = input.bool(true, title="Enable Strategy")

// 交易信号定义
// 做多 = 开多仓, 平多 = 平多仓, 做空 = 开空仓, 平空 = 平空仓
var array<int> tradeTimes = array.new<int>()
var array<string> tradeSignals = array.new<string>()
var array<float> tradeSizes = array.new<float>()

// 初始化交易数组 - 用户可以在这里配置交易计划
// 时间格式: timestamp (可以通过 timestamp("2024-01-01 09:30:00") 获取)
// 信号: "做多"=开多仓, "平多"=平多仓, "做空"=开空仓, "平空"=平空仓
// 仓位大小: 正数表示数量

// 示例交易计划 - 用户需要根据实际需求修改这些值
if barstate.isfirst
    // 添加交易计划
    // 格式: 时间戳, 买卖信号(中文), 仓位大小
    
    // 示例1: 2024-01-02 09:30:00 做多 100 股
    // array.push(tradeTimes, timestamp("2025-07-08 09:30:00 GMT+8"))
    // array.push(tradeSignals, "做多")
    // array.push(tradeSizes, 100.0)
    
    // 示例2: 2024-01-02 15:30:00 平多 50 股
    // array.push(tradeTimes, timestamp("2025-07-08 12:30:00 GMT+8"))
    // array.push(tradeSignals, "平多")
    // array.push(tradeSizes, 50.0)

    {{template}}
    

// 跟踪已执行的交易
varip array<bool> tradeExecuted = array.new<bool>()

// 初始化执行状态数组
if barstate.isfirst
    for i = 0 to array.size(tradeTimes) - 1
        array.push(tradeExecuted, false)

// 主要交易逻辑
if enableStrategy
    arraySize = array.size(tradeTimes)
    
    for i = 0 to arraySize - 1
        // 检查是否已经执行过这个交易
        if not array.get(tradeExecuted, i)
            targetTime = array.get(tradeTimes, i)
            signal = array.get(tradeSignals, i)
            size = array.get(tradeSizes, i)
            
            // 检查当前时间是否已经穿过目标时间
            if time >= targetTime
                // 执行交易
                if signal == "做多"  // 做多
                    if debugMode
                        log.info("执行做多订单: 时间={0}, 数量={1}", targetTime, size)
                    strategy.order("Long_" + str.tostring(i), strategy.long, qty=size, comment="#" + str.tostring(i + 1) + " " + "定时做多 " +  str.format_time(targetTime, timezone = 'UTC+8'))
                    
                else if signal == "平多"  // 平多
                    if debugMode
                        log.info("执行平多订单: 时间={0}, 数量={1}", targetTime, size)
                    
                    // 平多：关闭多头仓位
                    if strategy.position_size > 0
                        closeSize = math.min(size, strategy.position_size)
                        strategy.order("Close_Long_" + str.tostring(i), strategy.short, qty=closeSize, comment="#" + str.tostring(i + 1) + " " + "定时平多 " + str.format_time(targetTime, timezone = 'UTC+8'))
                        
                else if signal == "做空"  // 做空
                    if debugMode
                        log.info("执行做空订单: 时间={0}, 数量={1}", targetTime, size)
                    strategy.order("Short_" + str.tostring(i), strategy.short, qty=size, comment="#" + str.tostring(i + 1) + " " + "定时做空 " + str.format_time(targetTime, timezone = 'UTC+8'))
                    
                else if signal == "平空"  // 平空
                    if debugMode
                        log.info("执行平空订单: 时间={0}, 数量={1}", targetTime, size)
                    
                    // 平空：关闭空头仓位
                    if strategy.position_size < 0
                        closeSize = math.min(size, math.abs(strategy.position_size))
                        strategy.order("Close_Short_" + str.tostring(i), strategy.long, qty=closeSize, comment="#" + str.tostring(i + 1) + " " + "定时平空 " + str.format_time(targetTime, timezone = 'UTC+8'))
                
                // 标记为已执行
                array.set(tradeExecuted, i, true)
                
                // 在图表上显示执行点
                if signal == "做多"
                    label.new(bar_index, low, "做多\n" + str.tostring(size), color=color.green, style=label.style_label_up, size=size.small)
                else if signal == "平多"
                    label.new(bar_index, high, "平多\n" + str.tostring(size), color=color.lime, style=label.style_label_down, size=size.small)
                else if signal == "做空"
                    label.new(bar_index, high, "做空\n" + str.tostring(size), color=color.red, style=label.style_label_down, size=size.small)
                else if signal == "平空"
                    label.new(bar_index, low, "平空\n" + str.tostring(size), color=color.orange, style=label.style_label_up, size=size.small)

// 显示策略状态
var table infoTable = table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=1)

if barstate.islast
    table.cell(infoTable, 0, 0, "策略状态", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 0, enableStrategy ? "启用" : "禁用", text_color=color.black)
    
    table.cell(infoTable, 0, 1, "当前时间", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 1, str.format_time(timenow, timezone = 'UTC+8'), text_color=color.black)
    
    table.cell(infoTable, 0, 2, "计划交易数", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 2, str.tostring(array.size(tradeTimes)), text_color=color.black)
    
    // 统计已执行的交易
    executedCount = 0
    for i = 0 to array.size(tradeExecuted) - 1
        if array.get(tradeExecuted, i)
            executedCount += 1
    
    table.cell(infoTable, 0, 3, "已执行交易", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 3, str.tostring(executedCount), text_color=color.black)
    
    table.cell(infoTable, 0, 4, "当前仓位", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 4, str.tostring(strategy.position_size), text_color=color.black)
    
    table.cell(infoTable, 0, 5, "未实现盈亏", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 5, str.tostring(strategy.openprofit), text_color=color.black)
