//@version=6
strategy("Scheduled Trading Strategy", overlay=true, default_qty_type=strategy.fixed, calc_on_every_tick=true)

// 策略参数
debugMode = input.bool(false, title="Debug Mode")
enableStrategy = input.bool(true, title="Enable Strategy")

// 交易信号定义
// 1 = 买入, -1 = 卖出, 0 = 无操作
var array<int> tradeTimes = array.new<int>()
var array<int> tradeSignals = array.new<int>()
var array<float> tradeSizes = array.new<float>()

// 初始化交易数组 - 用户可以在这里配置交易计划
// 时间格式: timestamp (可以通过 timestamp("2024-01-01 09:30:00") 获取)
// 信号: 1=买入, -1=卖出
// 仓位大小: 正数表示数量

// 示例交易计划 - 用户需要根据实际需求修改这些值
if barstate.isfirst
    // 添加交易计划
    // 格式: 时间戳, 买卖信号(1/-1), 仓位大小
    
    // 示例1: 2024-01-02 09:30:00 买入 100 股
    // array.push(tradeTimes, timestamp("2025-07-08 09:30:00 GMT+8"))
    // array.push(tradeSignals, 1)
    // array.push(tradeSizes, 100.0)
    
    // 示例2: 2024-01-02 15:30:00 卖出 50 股
    // array.push(tradeTimes, timestamp("2025-07-08 12:30:00 GMT+8"))
    // array.push(tradeSignals, -1)
    // array.push(tradeSizes, 50.0)

    {{template}}
    

// 跟踪已执行的交易
varip array<bool> tradeExecuted = array.new<bool>()

// 初始化执行状态数组
if barstate.isfirst
    for i = 0 to array.size(tradeTimes) - 1
        array.push(tradeExecuted, false)

// 主要交易逻辑
if enableStrategy
    arraySize = array.size(tradeTimes)
    
    for i = 0 to arraySize - 1
        // 检查是否已经执行过这个交易
        if not array.get(tradeExecuted, i)
            targetTime = array.get(tradeTimes, i)
            signal = array.get(tradeSignals, i)
            size = array.get(tradeSizes, i)
            
            // 检查当前时间是否已经穿过目标时间
            if timenow >= targetTime
                // 执行交易
                if signal == 1  // 买入
                    if debugMode
                        log.info("执行买入订单: 时间={0}, 数量={1}", targetTime, size)
                    strategy.entry("Long_" + str.tostring(i), strategy.long, qty=size, comment="定时买入")
                    
                else if signal == -1  // 卖出
                    if debugMode
                        log.info("执行卖出订单: 时间={0}, 数量={1}", targetTime, size)
                    
                    // 如果有多头仓位，先平仓
                    if strategy.position_size > 0
                        closeSize = math.min(size, strategy.position_size)
                        strategy.close_all(comment="定时平仓")
                        
                        // 如果卖出数量大于持仓，开空仓
                        if size > strategy.position_size
                            remainingSize = size - strategy.position_size
                            strategy.entry("Short_" + str.tostring(i), strategy.short, qty=remainingSize, comment="定时做空")
                    else
                        // 没有多头仓位，直接开空仓
                        strategy.entry("Short_" + str.tostring(i), strategy.short, qty=size, comment="定时做空")
                
                // 标记为已执行
                array.set(tradeExecuted, i, true)
                
                // 在图表上显示执行点
                if signal == 1
                    label.new(bar_index, low, "买入\n" + str.tostring(size), color=color.green, style=label.style_label_up, size=size.small)
                else if signal == -1
                    label.new(bar_index, high, "卖出\n" + str.tostring(size), color=color.red, style=label.style_label_down, size=size.small)

// 显示策略状态
var table infoTable = table.new(position.top_right, 2, 6, bgcolor=color.white, border_width=1)

if barstate.islast
    table.cell(infoTable, 0, 0, "策略状态", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 0, enableStrategy ? "启用" : "禁用", text_color=color.black)
    
    table.cell(infoTable, 0, 1, "当前时间", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 1, str.format_time(timenow, timezone = 'UTC+8'), text_color=color.black)
    
    table.cell(infoTable, 0, 2, "计划交易数", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 2, str.tostring(array.size(tradeTimes)), text_color=color.black)
    
    // 统计已执行的交易
    executedCount = 0
    for i = 0 to array.size(tradeExecuted) - 1
        if array.get(tradeExecuted, i)
            executedCount += 1
    
    table.cell(infoTable, 0, 3, "已执行交易", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 3, str.tostring(executedCount), text_color=color.black)
    
    table.cell(infoTable, 0, 4, "当前仓位", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 4, str.tostring(strategy.position_size), text_color=color.black)
    
    table.cell(infoTable, 0, 5, "未实现盈亏", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 5, str.tostring(strategy.openprofit), text_color=color.black)
